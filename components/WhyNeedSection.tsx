'use client';

import { motion } from 'framer-motion';
import { useInView } from 'framer-motion';
import { useRef } from 'react';
import { 
  AlertTriangle, 
  TrendingDown, 
  Clock, 
  FileX,
  DollarSign,
  Users,
  Target,
  Zap,
  CheckCircle,
  ArrowRight
} from 'lucide-react';

const WhyNeedSection = () => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, threshold: 0.2 });

  const problems = [
    {
      icon: AlertTriangle,
      title: 'рж╣рж┐рж╕рж╛ржмрзЗрж░ ржЧрзЛрж▓ржорж╛рж▓',
      description: 'ржХрж╛ржЧржЬрзЗ рж╣рж┐рж╕рж╛ржм рж░рж╛ржЦрж╛рж░ ржХрж╛рж░ржгрзЗ ржкрзНрж░рж╛ржпрж╝ржЗ ржнрзБрж▓ рж╣ржпрж╝ ржПржмржВ ржЯрж╛ржХрж╛рж░ рж╣рж┐рж╕рж╛ржм ржорж┐рж▓рзЗ ржирж╛ред',
      impact: 'рзирзж-рзйрзж% ржЖрж░рзНржерж┐ржХ ржХрзНрж╖рждрж┐',
      color: 'bg-red-500'
    },
    {
      icon: TrendingDown,
      title: 'рж▓рж╛ржн ржХржо рж╣ржУржпрж╝рж╛',
      description: 'рж╕ржарж┐ржХ ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржУ ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗрж░ ржЕржнрж╛ржмрзЗ ржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рж▓рж╛ржн ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ ржирж╛ред',
      impact: 'ржЧржбрж╝рзЗ рзкрзж% ржХржо рж▓рж╛ржн',
      color: 'bg-orange-500'
    },
    {
      icon: Clock,
      title: 'рж╕ржоржпрж╝рзЗрж░ ржЕржкржЪржпрж╝',
      description: 'ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржХрж╛ржЬрзЗрж░ ржЬржирзНржп ржЕржирзЗржХ рж╕ржоржпрж╝ ржирж╖рзНржЯ рж╣ржпрж╝ ржпрж╛ ржмрзНржпржмрж╕рж╛ржпрж╝ рж▓рж╛ржЧрж╛ржирзЛ ржпрзЗрждред',
      impact: 'ржжрзИржирж┐ржХ рзй-рзк ржШржирзНржЯрж╛ ржирж╖рзНржЯ',
      color: 'bg-yellow-500'
    },
    {
      icon: FileX,
      title: 'рждржерзНржп рж╣рж╛рж░рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛',
      description: 'ржХрж╛ржЧржЬрзЗрж░ рж░рзЗржХрж░рзНржб рж╣рж╛рж░рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛ ржмрж╛ ржирж╖рзНржЯ рж╣ржУржпрж╝рж╛рж░ ржЭрзБржБржХрж┐ рж╕ржмрж╕ржоржпрж╝ред',
      impact: 'ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржбрзЗржЯрж╛ рж▓рж╕',
      color: 'bg-purple-500'
    }
  ];

  const solutions = [
    {
      icon: DollarSign,
      title: 'ржЖрж░рзНржерж┐ржХ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг',
      description: 'рж╕ржорзНржкрзВрж░рзНржг ржЖрж░рзНржерж┐ржХ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржПржмржВ рж╕рзНржмржЪрзНржЫрждрж╛',
      benefit: 'рж▓рж╛ржн рзйрзж% ржмрзГржжрзНржзрж┐'
    },
    {
      icon: Users,
      title: 'ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛',
      description: 'ржЙржирзНржиржд ржЧрзНрж░рж╛рж╣ржХ рж╕рзЗржмрж╛ ржПржмржВ рж╕ржирзНрждрзБрж╖рзНржЯрж┐',
      benefit: 'рзпрзл% ржЧрзНрж░рж╛рж╣ржХ рж╕ржирзНрждрзБрж╖рзНржЯрж┐'
    },
    {
      icon: Target,
      title: 'рж▓ржХрзНрж╖рзНржп ржЕрж░рзНржЬржи',
      description: 'рж╕ржарж┐ржХ ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржУ ржмрж╛рж╕рзНрждржмрж╛ржпрж╝ржи',
      benefit: 'рж▓ржХрзНрж╖рзНржп ржЕрж░рзНржЬржирзЗ рзорзж% рж╕ржлрж▓рждрж╛'
    },
    {
      icon: Zap,
      title: 'ржжрзНрж░рзБрждрждрж╛',
      description: 'рж╕ржХрж▓ ржХрж╛ржЬ ржжрзНрж░рзБржд ржПржмржВ ржирж┐рж░рзНржнрзБрж▓ржнрж╛ржмрзЗ рж╕ржорзНржкржирзНржи',
      benefit: 'рзнрзж% рж╕ржоржпрж╝ рж╕рж╛рж╢рзНрж░ржпрж╝'
    }
  ];

  const businessImpacts = [
    {
      title: 'ржЫрзЛржЯ ржмрзНржпржмрж╕рж╛',
      problems: ['рж╣рж┐рж╕рж╛ржм рж░рж╛ржЦрждрзЗ ржкрж╛рж░рзЗржи ржирж╛', 'ржЧрзНрж░рж╛рж╣ржХ рж╣рж╛рж░рж╛ржи', 'рж▓рж╛ржн ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗржи ржирж╛'],
      solutions: ['рж╕рж╣ржЬ рж╣рж┐рж╕рж╛ржм ржмрзНржпржмрж╕рзНржерж╛', 'ржЧрзНрж░рж╛рж╣ржХ ржбрзЗржЯрж╛ржмрзЗрж╕', 'рж▓рж╛ржн-ржХрзНрж╖рждрж┐ рж░рж┐ржкрзЛрж░рзНржЯ']
    },
    {
      title: 'ржорж╛ржЭрж╛рж░рж┐ ржмрзНржпржмрж╕рж╛',
      problems: ['ржХрж░рзНржорзА ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХржарж┐ржи', 'рж░рзБржЯ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи ржирзЗржЗ', 'ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржпрж╝ ржкрж┐ржЫрж┐ржпрж╝рзЗ'],
      solutions: ['ржХрж░рзНржорзА ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛', 'рж╕рзНржорж╛рж░рзНржЯ рж░рзБржЯ ржкрзНрж▓рзНржпрж╛ржирж┐ржВ', 'ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ рж╕рзБржмрж┐ржзрж╛']
    },
    {
      title: 'ржмржбрж╝ ржмрзНржпржмрж╕рж╛',
      problems: ['ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржирзЗржЗ', 'рж╕рзНржХрзЗрж▓рж┐ржВ рж╕ржорж╕рзНржпрж╛', 'ржПржХрж╛ржзрж┐ржХ рж╢рж╛ржЦрж╛ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг'],
      solutions: ['ржЙржирзНржиржд ржЕрзНржпрж╛ржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕', 'рж╕рзНржХрзЗрж▓рзЗржмрж▓ рж╕рж┐рж╕рзНржЯрзЗржо', 'рж╕рзЗржирзНржЯрзНрж░рж╛рж▓рж╛ржЗржЬржб ржХржирзНржЯрзНрж░рзЛрж▓']
    }
  ];

  return (
    <section id="why-need" className="py-20 bg-gradient-to-b from-primary-50 to-white" ref={ref}>
      <div className="container mx-auto px-4">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl lg:text-5xl font-bold text-primary mb-6">
            ржХрзЗржи ржЯрзНрж░рж╛ржирзНрж╕ржкрзЛрж░рзНржЯ ржмрзНржпржмрж╕рж╛ржпрж╝ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи?
          </h2>
          <p className="text-xl text-primary-700 max-w-4xl mx-auto leading-relaxed">
            ржЖржЬржХрзЗрж░ ржпрзБржЧрзЗ ржкрзНрж░ржпрзБржХрзНрждрж┐ ржЫрж╛ржбрж╝рж╛ ржмрзНржпржмрж╕рж╛ржпрж╝ ржЯрж┐ржХрзЗ ржерж╛ржХрж╛ ржкрзНрж░рж╛ржпрж╝ ржЕрж╕ржорзНржнржмред 
            ржжрзЗржЦрзБржи ржХрзАржнрж╛ржмрзЗ ржЯрзНрж░рж╛ржирзНрж╕ржкрзЛрж░рзНржЯ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рзЗред
          </p>
        </motion.div>

        {/* Problems vs Solutions */}
        <div className="grid lg:grid-cols-2 gap-16 mb-20">
          {/* Problems */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8 }}
          >
            <h3 className="text-3xl font-bold text-red-600 mb-8 text-center">
              ЁЯЪл ржмрж░рзНрждржорж╛ржи рж╕ржорж╕рзНржпрж╛ржЧрзБрж▓рзЛ
            </h3>
            
            <div className="space-y-6">
              {problems.map((problem, index) => (
                <motion.div
                  key={problem.title}
                  initial={{ opacity: 0, y: 30 }}
                  animate={isInView ? { opacity: 1, y: 0 } : {}}
                  transition={{ duration: 0.6, delay: index * 0.2 }}
                  className="bg-white border-l-4 border-red-500 p-6 rounded-lg shadow-lg"
                >
                  <div className="flex items-start space-x-4">
                    <div className={`${problem.color} p-3 rounded-lg text-white`}>
                      <problem.icon className="h-6 w-6" />
                    </div>
                    <div>
                      <h4 className="text-xl font-bold text-gray-900 mb-2">
                        {problem.title}
                      </h4>
                      <p className="text-gray-700 mb-3 leading-relaxed">
                        {problem.description}
                      </p>
                      <div className="bg-red-50 text-red-700 px-3 py-1 rounded-full text-sm font-medium inline-block">
                        ржкрзНрж░ржнрж╛ржм: {problem.impact}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* Solutions */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.2 }}
          >
            <h3 className="text-3xl font-bold text-green-600 mb-8 text-center">
              тЬЕ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░рзЗрж░ рж╕ржорж╛ржзрж╛ржи
            </h3>
            
            <div className="space-y-6">
              {solutions.map((solution, index) => (
                <motion.div
                  key={solution.title}
                  initial={{ opacity: 0, y: 30 }}
                  animate={isInView ? { opacity: 1, y: 0 } : {}}
                  transition={{ duration: 0.6, delay: 0.4 + index * 0.2 }}
                  className="bg-white border-l-4 border-green-500 p-6 rounded-lg shadow-lg"
                >
                  <div className="flex items-start space-x-4">
                    <div className="bg-green-500 p-3 rounded-lg text-white">
                      <solution.icon className="h-6 w-6" />
                    </div>
                    <div>
                      <h4 className="text-xl font-bold text-gray-900 mb-2">
                        {solution.title}
                      </h4>
                      <p className="text-gray-700 mb-3 leading-relaxed">
                        {solution.description}
                      </p>
                      <div className="bg-green-50 text-green-700 px-3 py-1 rounded-full text-sm font-medium inline-block">
                        ржлрж▓рж╛ржлрж▓: {solution.benefit}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        </div>

        {/* Business Size Impact */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 0.8 }}
          className="mb-20"
        >
          <h3 className="text-3xl font-bold text-primary text-center mb-12">
            ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржЖржХрж╛рж░ ржЕржирзБржпрж╛ржпрж╝рзА рж╕ржорж╛ржзрж╛ржи
          </h3>
          
          <div className="grid lg:grid-cols-3 gap-8">
            {businessImpacts.map((business, index) => (
              <motion.div
                key={business.title}
                initial={{ opacity: 0, scale: 0.8 }}
                animate={isInView ? { opacity: 1, scale: 1 } : {}}
                transition={{ duration: 0.6, delay: 1 + index * 0.2 }}
                className="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden"
              >
                <div className="bg-primary text-white p-6 text-center">
                  <h4 className="text-2xl font-bold">{business.title}</h4>
                </div>
                
                <div className="p-6">
                  <div className="mb-6">
                    <h5 className="text-lg font-bold text-red-600 mb-3">рж╕ржорж╕рзНржпрж╛:</h5>
                    <ul className="space-y-2">
                      {business.problems.map((problem, idx) => (
                        <li key={idx} className="flex items-center space-x-2">
                          <AlertTriangle className="h-4 w-4 text-red-500" />
                          <span className="text-gray-700 text-sm">{problem}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div>
                    <h5 className="text-lg font-bold text-green-600 mb-3">рж╕ржорж╛ржзрж╛ржи:</h5>
                    <ul className="space-y-2">
                      {business.solutions.map((solution, idx) => (
                        <li key={idx} className="flex items-center space-x-2">
                          <CheckCircle className="h-4 w-4 text-green-500" />
                          <span className="text-gray-700 text-sm">{solution}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Statistics */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 1.4 }}
          className="bg-primary text-white rounded-2xl p-12 text-center mb-16"
        >
          <h3 className="text-3xl font-bold mb-8">
            рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи
          </h3>
          
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
            {[
              { number: 'рзорзл%', label: 'ржмрзНржпржмрж╕рж╛ржпрж╝рзА ржпрж╛рж░рж╛ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржи рждрж╛рж░рж╛ ржмрзЗрж╢рж┐ рж▓рж╛ржнржмрж╛ржи' },
              { number: 'рзмрзж%', label: 'рж╕ржоржпрж╝ ржмрж╛ржБржЪрзЗ ржжрзИржиржирзНржжрж┐ржи ржХрж╛ржЬрзЗ' },
              { number: 'рзпрзл%', label: 'ржирж┐рж░рзНржнрзБрж▓рждрж╛ ржмрзГржжрзНржзрж┐ ржкрж╛ржпрж╝ рж╣рж┐рж╕рж╛ржмрзЗ' },
              { number: 'рзнрзж%', label: 'ржЧрзНрж░рж╛рж╣ржХ рж╕ржирзНрждрзБрж╖рзНржЯрж┐ ржмрзГржжрзНржзрж┐ ржкрж╛ржпрж╝' },
            ].map((stat, index) => (
              <div key={stat.label} className="text-center">
                <div className="text-4xl font-bold mb-3">{stat.number}</div>
                <div className="text-primary-200 text-sm leading-relaxed">{stat.label}</div>
              </div>
            ))}
          </div>
        </motion.div>

        {/* Call to Action */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 1.6 }}
          className="text-center bg-gradient-to-r from-primary-600 to-primary-800 text-white rounded-2xl p-12"
        >
          <h3 className="text-3xl font-bold mb-6">
            ржЖрж░ ржжрзЗрж░рж┐ ржиржпрж╝, ржЖржЬржЗ рж╢рзБрж░рзБ ржХрж░рзБржи ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржпрж╛рждрзНрж░рж╛
          </h3>
          <p className="text-xl leading-relaxed max-w-3xl mx-auto mb-8">
            ржкрзНрж░рждрж┐ржжрж┐ржи ржпрзЗ рж╕ржоржпрж╝ ржУ ржЯрж╛ржХрж╛ ржирж╖рзНржЯ рж╣ржЪрзНржЫрзЗ, рждрж╛ ржмржирзНржз ржХрж░рзБржи ржЖржЬржЗред 
            ржЯрзНрж░рзНржпрж╛ржорзЗрж╕рж┐рж░ рж╕рж╛ржерзЗ ржпрзБржХрзНржд рж╣ржпрж╝рзЗ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛ржХрзЗ ржирж┐ржпрж╝рзЗ ржпрж╛ржи ржирждрзБржи ржЙржЪрзНржЪрждрж╛ржпрж╝ред
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button className="bg-white text-primary px-8 py-4 rounded-lg font-semibold hover:bg-primary-50 transition-colors flex items-center justify-center">
              ржлрзНрж░рж┐ ржбрзЗржорзЛ ржмрзБржХ ржХрж░рзБржи
              <ArrowRight className="ml-2 h-5 w-5" />
            </button>
            <button className="border-2 border-white text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-primary transition-colors">
              ржЖрж░ржУ ржЬрж╛ржирзБржи
            </button>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default WhyNeedSection;